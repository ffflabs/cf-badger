import type { EnvWithDurableObject } from 'itty-router-extras';
import type { TRunResults } from './computeColorAndMessage';
import type { computeColorAndMessage } from './computeColorAndMessage';
import type { IInstallWebhook } from './webhook_schemes';

export type TInstallations = {
    expiration: number;
    installations: {
        id: number;
        target_type: string;
        login: string | undefined;
    }[];
};

export interface IRequestParams {
    env: EnvWithDurableObject;
    owner: string;
    repo: string;
    workflow_id: number;

    requestURL: URL;
    hashHex: string;
    branch?: string;
    verb?: string;
    endpoint?: string;
    payload: IInstallWebhook;
    code?: string;
}



export type TOutputResults = ReturnType<typeof computeColorAndMessage> | {
    branches: TRunResults[];
    hashHex: string;
    name?: string;
    count: number;
};

export type TInstallationRepos = {
    installationId: number | null;
    login: string;
    target_id?: number;
    expiration?: number;
    repositories: {
        id: number;
        name: string;
        full_name: string;
        private: boolean;
    }[];
};
// Generated by https://quicktype.io


export interface Permissions {
    actions: string;
    metadata: string;
}
export type TOwnerRepo = {
    owner: string;
    repo: string;
};
export type TOwnerOrInstallationId = {
    owner: string;
    installationId?: number;
} | {
    owner?: string;
    installationId: number;
};
// Generated by https://quicktype.io
export interface TWorkflow {
    id: number;
    node_id?: string;
    name: string;
    path?: string;
    state: string;
    created_at?: string;
    updated_at?: string;
    url?: string;
    html_url?: string;
    badge_url?: string;
    id_url?: string;
    filename_url?: string;
    runs?: string;
}
export function mapWorkflow({ owner, repo, workflow }: { owner: string; repo: string; workflow: TWorkflow; }, WORKER_URL: string): TWorkflow {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    let { id, name, state, url, path, node_id } = workflow, fileName = String(path).split('/').pop();
    return {
        id,
        name,
        state,
        url,
        filename_url: `https://github.com/${owner}/${repo}/actions/workflows/${fileName}`,
        runs: `${WORKER_URL}/badger/${owner}/${repo}/${id}`,
        node_id
        //  html_url
    };


}
export interface IRepoWorkflows {
    total_count: number;
    workflows: TWorkflow[];
}
type ErrorResponse = {
    response: {
        status: number;
        url: string;
        data: { [s: string]: unknown; };
    };
};
export function isErrorResponse(err: unknown, status?: number): err is ErrorResponse {
    let maybeErrorResponse = err as ErrorResponse;
    return !!maybeErrorResponse.response
        && typeof maybeErrorResponse.response.url === 'string'
        && typeof maybeErrorResponse.response.status === 'number'
        && (!status || maybeErrorResponse.response.status === status);
}
